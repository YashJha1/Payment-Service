/*package com.eci.paymentsservice.service.impl;

import com.eci.paymentsservice.dto.PaymentRequest;
import com.eci.paymentsservice.dto.PaymentResponse;
import com.eci.paymentsservice.model.Payment;
import com.eci.paymentsservice.repository.PaymentRepository;
import com.eci.paymentsservice.service.PaymentService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class PaymentServiceImpl implements PaymentService {

    private final PaymentRepository repo;

    // ‚úÖ Create or process a new payment
    @Override
    @Transactional
    public PaymentResponse charge(PaymentRequest req) {
        log.info("üí≥ Processing payment for Order ID: {}", req.getOrderId());

        // üîÅ Idempotency check
        if (req.getIdempotencyKey() != null) {
            var existing = repo.findByIdempotencyKey(req.getIdempotencyKey());
            if (existing.isPresent()) {
                log.warn("‚ö†Ô∏è Duplicate payment attempt detected. Returning existing record.");
                return toResponse(existing.get());
            }
        }

        // üèóÔ∏è Build a new Payment entity
        Payment payment = Payment.builder()
                .orderId(String.valueOf(req.getOrderId()))
                .amount(req.getAmount())
                .currency(req.getCurrency())
                .paymentMethod(req.getPaymentMethod())
                .status("PENDING")
                .idempotencyKey(req.getIdempotencyKey())
                .createdAt(OffsetDateTime.now())
                .updatedAt(OffsetDateTime.now())
                .build();

        payment = repo.save(payment);

        // üü¢ Simulate provider success (mock)
        payment.setStatus("COMPLETED");
        payment.setProviderTransactionId("PROV-" + UUID.randomUUID());
        payment.setUpdatedAt(OffsetDateTime.now());
        repo.save(payment);

        log.info("‚úÖ Payment completed for Order ID: {}", req.getOrderId());
        return toResponse(payment);
    }

    // ‚úÖ Retrieve payment by ID
    @Override
    public PaymentResponse getPayment(UUID id) {
        log.info("üîç Fetching payment with ID: {}", id);
        return repo.findById(id)
                .map(this::toResponse)
                .orElseThrow(() -> new RuntimeException("Payment not found with ID: " + id));
    }

    // ‚úÖ Process refund
    @Override
    @Transactional
    public PaymentResponse refund(UUID id, String idempotencyKey) {
        log.info("üí∞ Initiating refund for Payment ID: {}", id);

        Payment payment = repo.findById(id)
                .orElseThrow(() -> new RuntimeException("Payment not found"));

        if ("REFUNDED".equals(payment.getStatus())) {
            log.warn("‚ö†Ô∏è Payment already refunded. Returning existing record.");
            return toResponse(payment);
        }

        payment.setStatus("REFUNDED");
        payment.setProviderTransactionId("REF-" + UUID.randomUUID());
        payment.setUpdatedAt(OffsetDateTime.now());
        repo.save(payment);

        log.info("‚úÖ Refund processed successfully for Payment ID: {}", id);
        return toResponse(payment);
    }

    // ‚úÖ Fetch all payments
    @Override
    public List<PaymentResponse> getAllPayments() {
        log.info("üì¶ Fetching all payments from database...");
        return repo.findAll()
                .stream()
                .map(this::toResponse)
                .collect(Collectors.toList());
    }

    // ‚úÖ Fetch payments for a specific order
    /*@Override
    public List<PaymentResponse> getPaymentsByOrderId(Long orderId) {
        log.info("üîç Fetching all payments for Order ID: {}", orderId);
        return repo.findByOrderId(orderId)
                .stream()
                .map(this::toResponse)
                .collect(Collectors.toList());
    }*/

  /*  @Override
    public List<PaymentResponse> getPaymentsByOrderId(String orderId) {
    	return repo.findByOrderId(orderId)
               .stream()
               .map(this::toResponse)
               .toList();
    }


    // ‚úÖ Mapper: Entity ‚Üí DTO
    private PaymentResponse toResponse(Payment p) {
        return PaymentResponse.builder()
                .paymentId(p.getPaymentId())
                .orderId(p.getOrderId())
                .amount(p.getAmount())
                .currency(p.getCurrency())
                .paymentMethod(p.getPaymentMethod())
                .status(p.getStatus())
                .providerTransactionId(p.getProviderTransactionId())
                .createdAt(p.getCreatedAt())
                .updatedAt(p.getUpdatedAt())
                .build();
    }
}
*/

package com.eci.paymentsservice.service.impl;

import com.eci.paymentsservice.dto.PaymentRequest;
import com.eci.paymentsservice.dto.PaymentResponse;
import com.eci.paymentsservice.model.Payment;
import com.eci.paymentsservice.repository.PaymentRepository;
import com.eci.paymentsservice.service.PaymentService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class PaymentServiceImpl implements PaymentService {

    private final PaymentRepository repo;

    @Override
    @Transactional
    public PaymentResponse charge(PaymentRequest req) {
        if (req.getIdempotencyKey() != null) {
            var existing = repo.findByIdempotencyKey(req.getIdempotencyKey());
            if (existing.isPresent()) {
                return toResponse(existing.get());
            }
        }

        Payment p = Payment.builder()
                .orderId(req.getOrderId())
                .amount(req.getAmount())
                .currency(req.getCurrency())
                .paymentMethod(req.getPaymentMethod())
                .status("PENDING")
                .idempotencyKey(req.getIdempotencyKey())
                .createdAt(OffsetDateTime.now())
                .build();

        p = repo.save(p);

        // Simulate success from provider
        p.setStatus("COMPLETED");
        p.setProviderTransactionId("PROV-" + UUID.randomUUID());
        p.setUpdatedAt(OffsetDateTime.now());
        repo.save(p);

        return toResponse(p);
    }

    @Override
    public PaymentResponse getPayment(UUID id) {
        return repo.findById(id)
                .map(this::toResponse)
                .orElseThrow(() -> new RuntimeException("Payment not found"));
    }

    @Override
    @Transactional
    public PaymentResponse refund(UUID id, String idempotencyKey) {
        Payment p = repo.findById(id)
                .orElseThrow(() -> new RuntimeException("Payment not found"));

        if ("REFUNDED".equals(p.getStatus())) {
            return toResponse(p);
        }

        p.setStatus("REFUNDED");
        p.setProviderTransactionId("REF-" + UUID.randomUUID());
        p.setUpdatedAt(OffsetDateTime.now());
        repo.save(p);

        return toResponse(p);
    }

    @Override
    public List<PaymentResponse> getAllPayments() {
        return repo.findAll()
                .stream()
                .map(this::toResponse)
                .collect(Collectors.toList());
    }

    // ‚úÖ No builder() usage, fully manual object creation
    private PaymentResponse toResponse(Payment p) {
        PaymentResponse response = new PaymentResponse();
        response.setPaymentId(p.getPaymentId());
        response.setOrderId(p.getOrderId());
        response.setAmount(p.getAmount());
        response.setCurrency(p.getCurrency());
        response.setPaymentMethod(p.getPaymentMethod());
        response.setStatus(p.getStatus());
        response.setProviderTransactionId(p.getProviderTransactionId());
        response.setCreatedAt(p.getCreatedAt());
        response.setUpdatedAt(p.getUpdatedAt());
        return response;
    }

    @Override
    public List<PaymentResponse> getPaymentsByOrderId(String orderId) {
    	return repo.findByOrderId(orderId)
            .stream()
            .map(this::toResponse)
            .collect(java.util.stream.Collectors.toList());
    }
}

